# -*- coding: utf-8 -*-
"""BAMBAM.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PMlmVdFUlB7B7C88P6vt9Dwk0_uuLpmJ
"""

#pips
!pip install ecpy
!pip install pycryptodome
!pip install Crypto

import math
import timeit
import random
import sympy
import warnings
from random import randint, seed
import sys
from ecpy.curves import Curve,Point
from Crypto.Hash import SHA3_256
import requests
from Crypto.Cipher import AES
from Crypto import Random
from Crypto.Random.random import randint 
from Crypto.Util.Padding import pad
from Crypto.Util.Padding import unpad
import random
import re
import json
import hmac
import hashlib
API_URL = 'http://cryptlygos.pythonanywhere.com'

stuID =  26714  ## 24198,19872, 23574, 25655

#setup phase
curve = Curve.get_curve('secp256k1')
P= curve.generator
p = curve.field
n = curve.order 
a = curve.a
b = curve.b

def KeyGeneration(P,n): 
  #S_a = Random.random.randint(1,n-1)
  S_a = random.randint(1, n-1) #long term private key
  Q = S_a * P #public key
  return Q, S_a

def SignatureGeneration(P,n, message, S_a): 
  k = Random.random.randint(1,n-2) 
  R = k*P 
  r = R.x % n 
  message = str(message)
  #print(message)
  message = message.encode()
  r_bytes = r.to_bytes((r.bit_length()+7) // 8 , 'big')
  message = message + r_bytes 
  sha = SHA3_256.new(message) 
  h= int.from_bytes(sha.digest(), byteorder='big') % n
  s = pow(S_a * h + k, 1 ,n)
  return h, s

def MessageDecryption(i,msg,Q_bj,s):
  T = s[i]*Q_bj
  U = str(T.x) + str(T.y) + 'NoNeedToRunAndHide'
  sha = SHA3_256.new(U) 
  K_enc = int.from_bytes(sha.digest(), byteorder='big')
  sha_mac = SHA3_256.new(K_enc)  
  K_mac = int.from_bytes(sha_mac.digest(), byteorder='big')
  HMAC = hmac.new(key=K_mac,msg=msg,digestmod=hashlib.sha256).digest()

#OUR LONG KEYS
QCli_long = Point(0xb219ee212792868ba9b97382a55fb6fc799b157265299126ceb7fcab45d42c01 , 0x7626e4953d5c6c388b7652d4b18d37a43333b0cc940d4f6ff0ac4078fa52cf27,curve)
SL = 37184446026316359147926179065697345777863529595040509000128250686640201848774        #private
h, s = SignatureGeneration(P,n, stuID, SL)

#GENERATING EPHEMERAL KEYS
'''
s_a = []
Q_a = []
for i in range(10):
  q, sa= KeyGeneration(P,n)
  print("Q", i,":", q)
  s_a.append(sa)
  Q_a.append(q)
'''  
'''  
h_list = []
s_list = []
#SIGNING EPHEMERAL KEYS
for j in range(10):
  msg = str(Q_a[j].x) + str(Q_a[j].y)
  h_ , s_ = SignatureGeneration(P,n,msg,SL)
  h_list.append(h_)
  s_list.append(s_)
print(h_list)
'''
H_LIST= [3343706742361791745856210659503180230309998780469759780633319728185986734997, 42398768091574093641711692599962562048143395154143629750793796383105036344209, 20913836355931865136121297416871777848569107758470633514512532412082636524456, 1212755733128396749341313128436854364256707289039860583125665287500161079011, 57763696328935674269848348843944653233798110200730478538996927843771344169894, 9709494888831845057056479567397363262751363805015384293497969845324959865697, 54931714158048026785924701451858529536989934349802613067773675552210739725093, 42389871444315906524808695238056964110147679467317400813292501683334362395534, 81712747811487254663519023478529039181816025009880084304449336756918614941640, 93721588133953751382951617248960433338708141442865945940094662538638286116480]
S_LIST = [97340241649636523108143631528462932111281877297715155870070046913915152453582, 73137583812847791620994369959037200630962876403558669275093052062882062444173, 69270004044697756306663623125325663263841781568470121073883913335358070585730, 115331915680985101564715355513254756843950151142398436156892187284883390243457, 3399711813169536730271101191367947620333016290850165985839060512973550373354, 61496073122009752893597027197155739741352381282893600601233400846405751834500, 32304497646684674453971561812555612573874311828879324590566015662482989714068, 87126470579049903536378530127317963831474402132273988575511912084875514749292, 1298851068590320322197242591591411402894591315413906336577072605872929016457, 96977975198917414294990493471373124194159167818004441392677330247528386059739]

#our ephemeral keys

S_a = [71075365456130295998752747790802673550487689037306802342029712698073096492969, 86966217652168275225166512893489395509094717339178205366522221237973456370435, 25760687210170155010436609077817865440473104825789778472500748903995738120569, 92486362539454478820737492144721395227724790227302505636284524564520153981576, 53710406559257164740001466038983528154521168925162566257360097655069438665658, 42624056980300636640984251031127525193662749546117849588536882562882992975477, 53411950809284981265354836362236425671653452871613349139635465429491248454039, 108478158832281430694498258607169270107686920202991390057717847564469013426778, 85809394995433030941220585059431516607956834442459486898254318497625044783764, 65903211406858425714573763817827539163488514644035629032591447709992981920582]

Q_a = [Point (0x6f9d0187d01c873c6ec5a40dee31904db777eff02d3df35a0a9cd4c3f9b248b , 0x8261ddc0805a75be574e2ae804f0c617c6c28efb4c9e013ccaef4e79cd5f68a8,curve), 
      Point(0x7b83600635a3627764c031d74afaedfa377e50960d1923f6a209bca7dc8587a5 , 0xc41003df3f0f261261beda17f067dab1497da1c129b1839008a40247e7f99b56,curve),
      Point(0x230951e146e92a0492e9e48645b9d3554498bd9864cb79021501dfb9604daebd , 0x72209a108d0c208ffff9d0a1f9e93a7a7004cb6809a1c776c5c2547762bb519f,curve),
      Point(0xadc205728aa1471c4bc80761d33d7da7449ec11a3e630230798a2c4d2d636dca , 0x35ef4884d356a0e0ea73061fb3cadd34a9e1f466c1ed272ef465c34a574f4099,curve),
      Point(0x3307aa48ee3798319ec4129e23ec0a60a05b6796186abd26984175c42563c08b , 0xc6a6b3d51f3dd726891db1b0ce78ab88f0c88a6292b49e9ca5ea83ff6bd130e7,curve),
      Point(0x93cd7dbad6394932865be35af35883730c5f74c6d2e047a12697c0fbce4f6022 , 0x4da80f4cfa64a8326dbc388d8a4ca6c2af4bbd383db8b2e40096928ba5aed701,curve),
      Point(0x85c82d5491e3b356a49a4b51254d4ea5c630f9666daa651e6ada4b7e288d9a84 , 0xf293bb1c3f8469149d92af78850f0f01609d9df4606bc062258a39fd6b1b02b4,curve),
      Point(0x1de0648ae29bade097ada7094377aa1463b6cbfc24388249de2e406be3e58cf3 , 0xbb840d33fce9cf04a6d8b94da57712e5f642f785e030cd3f6339d603fffd19fc,curve),
      Point(0x6b129edd91bcee30d12b5102f491d30b9c5cbdcae90ba2cd021c9a298f30c854 , 0x961639c83fa09fc2249c6f272de6411787e2ac84b53b7e4383ff8b8310e29fb,curve),
      Point(0x51910e4c7c913f9d9b6964304a82bf25868e94ffd1863782ab6183b4c6b621e5 , 0x1e0f1431c8f3f90dc02ed0b8edea3507b8b6ac21c7d420d877cf1f3c6b1273a0,curve)]
      

#STORE EPHEMERAL PRIVATE KEYS

#server's long term key
QSer_long = Point(0xc1bc6c9063b6985fe4b93be9b8f9d9149c353ae83c34a434ac91c85f61ddd1e9 , 0x931bd623cf52ee6009ed3f50f6b4f92c564431306d284be7e97af8e443e69a8c, curve)


####Register Long Term Key
'''
mes = {'ID':26714, 'H': h, 'S': s, 'LKEY.X': QCli_long.x, 'LKEY.Y': QCli_long.y} #changed ID here
response = requests.put('{}/{}'.format(API_URL, "RegLongRqst"), json = mes)
print(response.json())
code = input()

mes = {'ID':26714, 'CODE': code}                            #changed ID here
response = requests.put('{}/{}'.format(API_URL, "RegLong"), json = mes)
print(response.json())
'''

dtext_list = [] # for keeping decrypted messages

for i in range(0, 10):
  ekey = Q_a[i]
  si = S_LIST[i]
  hi = H_LIST[i]
  #send ephemeral key
  mes = {'ID': stuID, 'KEYID': i , 'QAI.X': ekey.x, 'QAI.Y': ekey.y, 'Si': si, 'Hi': hi}
  response = requests.put('{}/{}'.format(API_URL, "SendKey"), json = mes)
  print(i, response.json())

for j in range(0, 5):
  ### Receiving Messages
  mes = {'ID_A': stuID, 'S': s, 'H': h}
  response = requests.get('{}/{}'.format(API_URL, "ReqMsg"), json = mes)
  print(response.json())
  res = response.json()

  ### Decrypt Messages

  #Computing session keys
  kid = res['KEYID']
  q_b = Point(res['QBJ.X'],res['QBJ.Y'],curve)
  T = S_a[int(kid)]*q_b
  U = str(T.x) + str(T.y) + 'NoNeedToRunAndHide'
  U = U.encode()
  sha = SHA3_256.new(U) 
  K_enc = sha.digest()
  sha_mac = SHA3_256.new(K_enc)  
  K_mac = sha_mac.digest()

  #Convert message to bytes
  msg = res['MSG'].to_bytes((res['MSG'].bit_length()+7) // 8 , 'big')
  print("Message retrieved from sender:",msg)
  #Ciphertext part of message
  ctext = msg[8:len(msg)-32]
  print("Ciphertext:",ctext)
  #HMAC part of message
  hmac_ = msg[len(msg)-32:]
  #print("HMAC part of message:",hmac_)

  ### HMAC CALCULATION ###
  HMAC = hmac.new(key = K_mac,msg = ctext,digestmod = hashlib.sha256).digest()
  #print("HMAC calculated:",HMAC)
  #Verfiy the hmac if calculated hma<c and recieved hmac are the same
  if HMAC == hmac_:
    print("HMAC Verified!")

  ### DECRYPT ###
  mes = msg[:len(msg)-32]
  cipher = AES.new(K_enc, AES.MODE_CTR, nonce=mes[0:8])
  dtext = cipher.decrypt(mes[8:])
  dtext = dtext.decode()
  print("Message:", dtext)
  print()
  dtext_list.append(dtext) #keep decrypted messages in a list

for k in range(0, 5):
  h = dtext_list[k]
  #send decrypted messages to server
  mes = {'ID_A': stuID, 'DECMSG': h}
  response = requests.put('{}/{}'.format(API_URL, "Checker"), json = mes)
  print(response.json())

'''
###delete ephemeral keys
mes = {'ID': stuID, 'S': s, 'H': h}
response = requests.get('{}/{}'.format(API_URL, "RstEKey"), json = mes)
'''

###########DELETE LONG TERM KEY
# If you lost your long term key, you can reset it yourself with below code.

# First you need to send a request to delete it. 
'''
mes = {'ID': stuID}
response = requests.get('{}/{}'.format(API_URL, "RstLongRqst"), json = mes)
'''
#Then server will send a verification code to your email. 
# Send this code to server using below code
'''
mes = {'ID': stuID, 'CODE': code}
response = requests.get('{}/{}'.format(API_URL, "RstLong"), json = mes)
'''
#Now your long term key is deleted. You can register again.